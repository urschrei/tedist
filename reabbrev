#!/usr/bin/python
# encoding: utf-8

"""
Attempt to read the contents of a .textexpander plist file, and generate a new file with the user's abbreviations of choice.
"""

import plistlib
import sys
import os.path
import argparse


parser = argparse.ArgumentParser(
    description = 'Replace TextExpander prefixes with your abbreviation of choice')



class TXFile(argparse.FileType):
    """
    subclass argparse FileType in order to do some input file error checking
    """
    def __call__(self, string):
        base, ext = os.path.splitext(string)
        if ext != '.textexpander':
            msg = "The input filename must have a .textexpander extension."
            raise parser.error(msg)
        try:
            return super(TXFile, self).__call__(string)
        except IOError:
            raise parser.error("Couldn't open %s to read from." % string)



parser.add_argument(
    "infile", type = TXFile("r"),
    metavar = "filename.textexpander",
    help = "a .textexpander file")

fromcl = parser.parse_args()
basename, extension = os.path.splitext(fromcl.infile.name)

# Generate the new filename.
outfile = basename + "-2" + extension

# Parse the snippet file.
te = plistlib.readPlist(fromcl.infile)

# Go through the snippets, allowing the user to change each abbreviation.
for i in range(len(te['snippetsTE2'])):
    print 'Label: ' + te['snippetsTE2'][i]['label']
    newabbrev = raw_input(
            'Abbreviation [' + te['snippetsTE2'][i]['abbreviation'] + ']: ')
    if newabbrev != '':
        te['snippetsTE2'][i]['abbreviation'] = newabbrev
    print

# Write out the new .textexpander file.
try:
    plistlib.writePlist(te, outfile)
    print "wrote:", outfile
except IOError:
    print "Couldn't write new textexpander file", outfile
    sys.exit(-1)

